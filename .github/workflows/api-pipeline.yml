name: Rada API CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - '.github/workflows/api-pipeline.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/rada-api

jobs:
  test:
    name: Test API Services
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: rada_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          cd services/api-gateway
          npm ci
          cd ../lightning-service
          npm ci
          cd ../mpesa-service
          npm ci
          cd ../exchange-service
          npm ci

      - name: Run Linting
        run: |
          cd services/api-gateway
          npm run lint
          cd ../lightning-service
          npm run lint

      - name: Run Unit Tests
        run: |
          cd services/api-gateway
          npm test -- --coverage
          cd ../lightning-service
          npm test -- --coverage
          cd ../mpesa-service
          npm test -- --coverage
          cd ../exchange-service
          npm test -- --coverage
        env:
          TEST_DATABASE_URL: postgresql://test:test@localhost:5432/rada_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret

      - name: Upload Test Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./services/*/coverage/coverage-final.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=long
            type=semver,pattern={{version}}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./services/api-gateway
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1

      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to Staging
        run: |
          helm upgrade --install rada ./helm \
            --namespace rada-staging \
            --create-namespace \
            --set image.tag=${GITHUB_SHA} \
            --set env.NODE_ENV=staging \
            --set secrets.JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --set secrets.MPESA_CONSUMER_KEY=${{ secrets.MPESA_CONSUMER_KEY }} \
            --set secrets.MPESA_CONSUMER_SECRET=${{ secrets.MPESA_CONSUMER_SECRET }} \
            --wait --timeout 5m

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.rada.co.ke

    steps:
      - uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1

      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Deploy to Production
        run: |
          helm upgrade --install rada ./helm \
            --namespace rada-production \
            --create-namespace \
            --set image.tag=${GITHUB_SHA} \
            --set env.NODE_ENV=production \
            --set secrets.JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --set secrets.MPESA_CONSUMER_KEY=${{ secrets.MPESA_CONSUMER_KEY }} \
            --set secrets.MPESA_CONSUMER_SECRET=${{ secrets.MPESA_CONSUMER_SECRET }} \
            --wait --timeout 5m
